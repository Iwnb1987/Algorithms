//Array. this returns all people in the array and their credentials. Oldest to youngest.
//And if ages are identical, they will be sorted lexicographically.
let people = [{
  name: 'Mike', age: 30, job: 'Project Manager'
}, {
  name: 'Damion', age: 52, job: 'Taxi Driver'}];
people.sort((a,b) => a.age - b.age);
people.sort((a,b) => a.name.localeCompare(b.name));
console.log(people)


//A Try Catch Method. You're prompted for a number
//If you enter 0 or a letter you'll get an error message
try {
  let dividend = Number(prompt('enter a dividend:'));
  let divisor = Number(prompt('enter a divisor:'));
  if(divisor === 0) {
    throw new Error("can't divide by 0");
  }
  if(isNaN(dvidend / divisor)) {
    throw new Error("Numbers only")
  }
  let result = dividend / divisor;
  consolelog(result)
}
catch(error) {
  console.log(error)
}
console.log('You made it to the end!')


//Filter Method. Filters what numbers are divisible by 8 and 3 with nothing left over.
//if there is numbers left over, it will return false.
let numbers = [10, 14, 20, 24, 30, 34, 40, 42, 46, 49, 50, 55, 60, 70];
let even = numbers.filter(isEven);
function isEven(element) {
  console.log(element % 8 === 0)
}
isEven();
let odd = numbers.filter(isOdd);
function isOdd(elements) {
  console.log(elements % 3 === 0)
}


//A Sort Method. It sorts the string and interger arrays lexicographically and numerically.
let fruits = ['apple', 'orange', 'lemon', 'lime'];
let num = [1, 10, 100, 3, 77,63,73,88, 90];
fruits.sort();
console.log(fruits)
num.sort((a,b) => a-b);
console.log(num)

//Brute Force #1 using a technique called destructuring assignment,
//I'm able to swap the values of nums[i] and nums[j]. Each Iteration gradually 
//sorts the array in ascending order
class Solution {
    sort(nums) {
    for(let i = 0; i < nums.length; i++){
       for(let j = i + 1; j < nums.length; j++){
           if(nums[i] > nums[j]){
               [nums[i], nums[j]] = [nums[j], nums[i]];
           }
       } 
    }
    }
    }


    //Brute Force #2, Should i or j be equal to n or sum,
   //result will be incremented until equal to the parameters.
   function countPairs(n, sum) {
    let result = 0;
    for(let i = 1; i <= n; i++){
       for(let j = i; j <= n; j++){
         if(i + j === sum){
             result++;
         }
         } 
       }
       return result;
    }

  //Brute Force #3, this checks every pair of numbers in the array,
  //to see if it matches up with target. The inner loop picks the first number,
//the outer loop picks the second. And if there sum equals target, I return both indexes.
//Once both loops end and if no solution is found it will return [-1, -1]
  class Solution {
    twoSum(nums, target) {
    for(let i = 0; i < nums.length; i++){
        for(let j = i+1; j < nums.length; j++){
         if(nums[i] + nums[j] === target){
             return [i, j]
         }   
        }
    }
    return [-1, -1]
    }
}

//Brute force #4, The logic is to iterate through each number in an array 
//and check if it already exists in another array. Calling includes() method inside the loop
//checks if value/nums is already present in the array, checking for duplicates.
//If value doesn't exist in the array, I push() it to the top.
//And return the solution after iterating through all the elements
class Solution {
    removeDuplicates(nums) {
        let uniqueValues = [];
        for (let value of nums) {
            if (!uniqueValues.includes(value)) {
                uniqueValues.push(value);
            }
        }
        return uniqueValues;
    }
}


    //Brute force 5, It's hard to say if I actually found a solution here.
    //The logic here is detect repeats of numbers. if the subarray doesn't include nums[j], 
    //I update the result to the maximum length found.
  //Meaning the current subarray is longer than the previous subarray.
      class Solution {
    longestSubarrayWithoutReapeating(nums) {
    let result = 0;
    for(let i = 0; i < nums.length; i++){
        for(let j = i; j < nums.length; j++){
            if(nums.slice(i,j).includes(nums[j])){
                break;
            }
            result = Math.max(result,  j-i+1)
        }
    }
    return result;
    }
}
    
